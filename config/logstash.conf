input {
  # Direct HTTP input for additional sources
  http {
    port => 8080
    codec => json
  }
  
  # Elasticsearch input for re-processing if needed
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "audit-*"
    query => '{ "query": { "match": { "severity": "ERROR" } } }'
    schedule => "*/5 * * * *"
    user => "${ES_USERNAME}"
    password => "${ES_PASSWORD}"
    tags => ["error_reprocess"]
  }
}

filter {
  # Parse timestamps
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add metadata
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:development}"
      "compliance_version" => "0.9.0"
    }
  }
  
  # Extract message type specifics
  if [message_type] == "HL7" {
    mutate {
      add_field => { "protocol" => "HL7v2" }
    }
  } else if [message_type] == "DICOM" {
    mutate {
      add_field => { "protocol" => "DICOM" }
    }
  } else if [message_type] == "FHIR" {
    mutate {
      add_field => { "protocol" => "FHIR" }
    }
  }
  
  # Anonymize patient data for logs
  if [parsed_data][segments][PID][patient_name] {
    mutate {
      gsub => [
        "[parsed_data][segments][PID][patient_name]", ".", "*"
      ]
    }
  }
}

output {
  # Primary Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "audit-%{+YYYY.MM.dd}"
    user => "${ES_USERNAME}"
    password => "${ES_PASSWORD}"
    template_name => "audit-template"
    template => "/usr/share/logstash/templates/audit-template.json"
    template_overwrite => true
  }
  
  # Alert on errors
  if [severity] == "ERROR" {
    # Send to monitoring system
    http {
      url => "${ALERT_WEBHOOK_URL}"
      http_method => "post"
      format => "json"
      mapping => {
        "severity" => "%{severity}"
        "message_id" => "%{message_id}"
        "channel_id" => "%{channel_id}"
        "timestamp" => "%{@timestamp}"
        "message" => "Compliance validation error detected"
      }
    }
  }
  
  # Debug output
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}